{"version":3,"sources":["components/SearchFilm/SearchFilm.js","components/SearchFilmlist/SearchFilmlist.js","views/MoviesPage/MoviesPage.js","service/API.js"],"names":["SearchFilm","onSubmit","useState","value","setValue","formReset","e","preventDefault","trim","toast","error","className","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","FilmsList","films","url","useRouteMatch","location","useLocation","console","log","map","id","original_title","to","pathname","state","from","MoviesPage","history","useHistory","search","setSearch","setFilms","useEffect","push","API","then","response","results","catch","Error","param","URLSearchParams","get","Container","BASE_URL","API_KEY","fetchTrand","axios","data","fetchQuery","fetchActors","movieId","fetchReview","fetchMovieDetails"],"mappings":"kPAIe,SAASA,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SACnC,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAgBMC,EAAY,WAChBD,EAAS,KAGX,OACE,8BACE,uBAAMH,SAhBW,SAACK,GAGpB,GAFAA,EAAEC,iBAEmB,KAAjBJ,EAAMK,OACR,OAAOC,IAAMC,MAAM,0BAErBT,EAASE,GACTE,KASgCM,UAAU,aAAxC,UACE,uBACEA,UAAU,mBACVC,KAAK,OACLC,aAAa,MACbV,MAAOA,EACPW,WAAS,EACTC,YAAY,eACZC,SA5BiB,SAACV,GACxBF,EAASE,EAAEW,cAAcd,MAAMe,kBA6B3B,wBAAQN,KAAK,SAASD,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,2B,WCnCK,SAASQ,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAC1BC,EAAQC,cAARD,IACFE,EAAWC,cAEjB,OADAC,QAAQC,IAAIH,GAEV,6BACGH,EAAMO,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACT,6BACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKV,EAAL,YAAYO,GACpBI,MAAO,CAAEC,KAAMV,IAHnB,SAMGM,KAPID,Q,YCHF,SAASM,IACtB,IAAMX,EAAWC,cACXW,EAAUC,cAChB,EAA4BlC,mBAAS,IAArC,mBAAOmC,EAAP,KAAeC,EAAf,KACA,EAA0BpC,mBAAS,IAAnC,mBAAOkB,EAAP,KAAcmB,EAAd,KA8BA,OAzBAC,qBAAU,WACO,KAAXH,GAGAA,IACFF,EAAQM,KAAR,2BACKlB,GADL,IAEEc,OAAO,UAAD,OAAYA,MAEpBK,IAAeL,GACZM,MAAK,SAACC,GACLL,EAASK,EAASC,YAEnBC,MAAMrB,QAAQC,IAAIqB,WAEtB,CAACV,IAEJG,qBAAU,WACR,GAAwB,KAApBjB,EAASc,OAAb,CAGA,IAAMW,EAAQ,IAAIC,gBAAgB1B,EAASc,QAAQa,IAAI,SACvDZ,EAAUU,MACT,CAACzB,EAASc,SAGX,gCACE,cAACc,EAAA,EAAD,UACE,cAACnD,EAAD,CAAYC,SAhCK,SAACE,GACtBmC,EAAUnC,QAiCR,cAACgD,EAAA,EAAD,UACE,cAAC,EAAD,CAAgB/B,MAAOA,W,gCC/C/B,+LAEMgC,EAAW,+BACXC,EAAU,mCAGT,SAASC,IACd,OAAOC,IACJL,IADI,UAEAE,EAFA,qCAEqCC,EAFrC,gCAHI,IAORV,MAAK,SAACC,GACL,OAAOA,EAASY,QAIf,SAASC,EAAWpB,GACzB,OAAOkB,IACJL,IADI,UACGE,EADH,iCACoCC,EADpC,kBACqDhB,IACzDM,MAAK,SAACC,GACL,OAAOA,EAASY,QAIf,SAASE,EAAYC,GAC1B,OAAOJ,IACJL,IADI,UAEAE,EAFA,kBAEkBO,EAFlB,4BAE6CN,EAF7C,oBAIJV,MAAK,SAACC,GACL,OAAOA,EAASY,QAIf,SAASI,EAAYD,GAC1B,OAAOJ,IACJL,IADI,UAEAE,EAFA,kBAEkBO,EAFlB,4BAE6CN,EAF7C,oBAIJV,MAAK,SAACC,GACL,OAAOA,EAASY,QAGf,SAASK,EAAkBF,GAC9B,OAAOJ,IACFL,IADE,UACKE,EADL,kBACuBO,EADvB,oBAC0CN,EAD1C,oBAEFV,MAAK,SAACC,GACH,OAAOA,EAASY","file":"static/js/9.28cb95c9.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function SearchFilm({ onSubmit }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const handleSearchFilm = (e) => {\r\n    setValue(e.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (value.trim() === \"\") {\r\n      return toast.error(\"Enter correct request!\");\r\n    }\r\n    onSubmit(value);\r\n    formReset();\r\n  };\r\n\r\n  const formReset = () => {\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit} className=\"SearchForm\">\r\n        <input\r\n          className=\"SearchForm-input\"\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          value={value}\r\n          autoFocus\r\n          placeholder=\"Search movie\"\r\n          onChange={handleSearchFilm}\r\n        />\r\n        <button type=\"submit\" className=\"SearchForm-button\">\r\n          <span className=\"SearchForm-button-label\">Search</span>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nSearchFilm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link, useLocation, useRouteMatch } from \"react-router-dom\";\r\nexport default function FilmsList({ films }) {\r\n  const { url } = useRouteMatch();\r\n  const location = useLocation();\r\n  console.log(location);\r\n  return (\r\n    <ul>\r\n      {films.map(({ id, original_title }) => (\r\n        <li key={id}>\r\n          <Link\r\n            to={{\r\n              pathname: `${url}/${id}`,\r\n              state: { from: location },\r\n            }}\r\n          >\r\n            {original_title}\r\n          </Link>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFilmsList.propTypes = {\r\n  films: PropTypes.array.isRequired,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Container from \"../../components/Container/Container\";\r\nimport SearchFilm from \"../../components/SearchFilm/SearchFilm\";\r\nimport SearchFilmList from \"../../components/SearchFilmlist/SearchFilmlist\";\r\nimport * as API from \"../../service/API\";\r\n\r\nexport default function MoviesPage() {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [films, setFilms] = useState([]);\r\n  const onSubmitSearch = (value) => {\r\n    setSearch(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (search === \"\") {\r\n      return;\r\n    }\r\n    if (search) {\r\n      history.push({\r\n        ...location,\r\n        search: `?query=${search}`,\r\n      });\r\n      API.fetchQuery(search)\r\n        .then((response) => {\r\n          setFilms(response.results);\r\n        })\r\n        .catch(console.log(Error));\r\n    }\r\n  }, [search]);\r\n\r\n  useEffect(() => {\r\n    if (location.search === \"\") {\r\n      return;\r\n    }\r\n    const param = new URLSearchParams(location.search).get(\"query\");\r\n    setSearch(param);\r\n  }, [location.search]);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <SearchFilm onSubmit={onSubmitSearch} />\r\n      </Container>\r\n      <Container>\r\n        <SearchFilmList films={films} />\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst API_KEY = \"c740ae3bc849e8128f3bc5da169fb976\";\r\nconst page = 1;\r\n\r\nexport function fetchTrand() {\r\n  return axios\r\n    .get(\r\n      `${BASE_URL}/trending/all/day?api_key=${API_KEY}&language=en-US&page=${page}`\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    });\r\n}\r\n\r\nexport function fetchQuery(search) {\r\n  return axios\r\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${search}`)\r\n    .then((response) => {\r\n      return response.data;\r\n    });\r\n}\r\n\r\nexport function fetchActors(movieId) {\r\n  return axios\r\n    .get(\r\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    });\r\n}\r\n\r\nexport function fetchReview(movieId) {\r\n  return axios\r\n    .get(\r\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\r\n    )\r\n    .then((response) => {\r\n      return response.data;\r\n    });\r\n}\r\nexport function fetchMovieDetails(movieId) {\r\n    return axios\r\n        .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\r\n        .then((response) => {\r\n            return response.data\r\n});\r\n}\r\n"],"sourceRoot":""}